/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 23220.0, "series": [{"data": [[0.0, 101.0], [0.1, 101.0], [0.2, 102.0], [0.3, 102.0], [0.4, 102.0], [0.5, 102.0], [0.6, 102.0], [0.7, 102.0], [0.8, 102.0], [0.9, 102.0], [1.0, 103.0], [1.1, 103.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 103.0], [1.6, 104.0], [1.7, 104.0], [1.8, 200.0], [1.9, 200.0], [2.0, 201.0], [2.1, 201.0], [2.2, 201.0], [2.3, 201.0], [2.4, 202.0], [2.5, 202.0], [2.6, 203.0], [2.7, 203.0], [2.8, 203.0], [2.9, 203.0], [3.0, 203.0], [3.1, 203.0], [3.2, 203.0], [3.3, 203.0], [3.4, 206.0], [3.5, 301.0], [3.6, 302.0], [3.7, 302.0], [3.8, 302.0], [3.9, 303.0], [4.0, 304.0], [4.1, 304.0], [4.2, 304.0], [4.3, 305.0], [4.4, 402.0], [4.5, 402.0], [4.6, 402.0], [4.7, 403.0], [4.8, 403.0], [4.9, 403.0], [5.0, 405.0], [5.1, 465.0], [5.2, 484.0], [5.3, 499.0], [5.4, 502.0], [5.5, 502.0], [5.6, 503.0], [5.7, 503.0], [5.8, 503.0], [5.9, 503.0], [6.0, 503.0], [6.1, 503.0], [6.2, 504.0], [6.3, 504.0], [6.4, 504.0], [6.5, 505.0], [6.6, 505.0], [6.7, 505.0], [6.8, 506.0], [6.9, 704.0], [7.0, 987.0], [7.1, 997.0], [7.2, 997.0], [7.3, 1000.0], [7.4, 1104.0], [7.5, 1104.0], [7.6, 1106.0], [7.7, 1207.0], [7.8, 1254.0], [7.9, 1261.0], [8.0, 1513.0], [8.1, 1523.0], [8.2, 1880.0], [8.3, 1884.0], [8.4, 1968.0], [8.5, 2045.0], [8.6, 2167.0], [8.7, 2293.0], [8.8, 2386.0], [8.9, 2645.0], [9.0, 2677.0], [9.1, 2683.0], [9.2, 2742.0], [9.3, 2913.0], [9.4, 3010.0], [9.5, 3077.0], [9.6, 3129.0], [9.7, 3130.0], [9.8, 3174.0], [9.9, 3177.0], [10.0, 3199.0], [10.1, 3219.0], [10.2, 3272.0], [10.3, 3281.0], [10.4, 3292.0], [10.5, 3320.0], [10.6, 3338.0], [10.7, 3345.0], [10.8, 3368.0], [10.9, 3372.0], [11.0, 3392.0], [11.1, 3395.0], [11.2, 3397.0], [11.3, 3398.0], [11.4, 3398.0], [11.5, 3400.0], [11.6, 3409.0], [11.7, 3411.0], [11.8, 3425.0], [11.9, 3435.0], [12.0, 3445.0], [12.1, 3449.0], [12.2, 3461.0], [12.3, 3462.0], [12.4, 3463.0], [12.5, 3472.0], [12.6, 3481.0], [12.7, 3484.0], [12.8, 3493.0], [12.9, 3499.0], [13.0, 3499.0], [13.1, 3500.0], [13.2, 3508.0], [13.3, 3540.0], [13.4, 3541.0], [13.5, 3543.0], [13.6, 3557.0], [13.7, 3557.0], [13.8, 3571.0], [13.9, 3576.0], [14.0, 3583.0], [14.1, 3584.0], [14.2, 3585.0], [14.3, 3585.0], [14.4, 3586.0], [14.5, 3587.0], [14.6, 3591.0], [14.7, 3591.0], [14.8, 3594.0], [14.9, 3601.0], [15.0, 3602.0], [15.1, 3606.0], [15.2, 3627.0], [15.3, 3630.0], [15.4, 3637.0], [15.5, 3643.0], [15.6, 3654.0], [15.7, 3659.0], [15.8, 3660.0], [15.9, 3666.0], [16.0, 3667.0], [16.1, 3670.0], [16.2, 3671.0], [16.3, 3674.0], [16.4, 3679.0], [16.5, 3682.0], [16.6, 3683.0], [16.7, 3687.0], [16.8, 3692.0], [16.9, 3692.0], [17.0, 3696.0], [17.1, 3697.0], [17.2, 3698.0], [17.3, 3699.0], [17.4, 3708.0], [17.5, 3708.0], [17.6, 3708.0], [17.7, 3710.0], [17.8, 3717.0], [17.9, 3721.0], [18.0, 3729.0], [18.1, 3730.0], [18.2, 3735.0], [18.3, 3737.0], [18.4, 3738.0], [18.5, 3741.0], [18.6, 3743.0], [18.7, 3744.0], [18.8, 3747.0], [18.9, 3747.0], [19.0, 3751.0], [19.1, 3752.0], [19.2, 3753.0], [19.3, 3755.0], [19.4, 3761.0], [19.5, 3766.0], [19.6, 3769.0], [19.7, 3772.0], [19.8, 3774.0], [19.9, 3778.0], [20.0, 3780.0], [20.1, 3780.0], [20.2, 3781.0], [20.3, 3783.0], [20.4, 3790.0], [20.5, 3794.0], [20.6, 3800.0], [20.7, 3801.0], [20.8, 3801.0], [20.9, 3802.0], [21.0, 3804.0], [21.1, 3805.0], [21.2, 3806.0], [21.3, 3811.0], [21.4, 3815.0], [21.5, 3815.0], [21.6, 3818.0], [21.7, 3819.0], [21.8, 3820.0], [21.9, 3821.0], [22.0, 3825.0], [22.1, 3827.0], [22.2, 3831.0], [22.3, 3832.0], [22.4, 3834.0], [22.5, 3835.0], [22.6, 3842.0], [22.7, 3843.0], [22.8, 3849.0], [22.9, 3850.0], [23.0, 3851.0], [23.1, 3852.0], [23.2, 3852.0], [23.3, 3854.0], [23.4, 3857.0], [23.5, 3864.0], [23.6, 3868.0], [23.7, 3869.0], [23.8, 3875.0], [23.9, 3877.0], [24.0, 3890.0], [24.1, 3891.0], [24.2, 3892.0], [24.3, 3898.0], [24.4, 3899.0], [24.5, 3900.0], [24.6, 3902.0], [24.7, 3902.0], [24.8, 3902.0], [24.9, 3903.0], [25.0, 3904.0], [25.1, 3907.0], [25.2, 3909.0], [25.3, 3911.0], [25.4, 3912.0], [25.5, 3915.0], [25.6, 3920.0], [25.7, 3924.0], [25.8, 3924.0], [25.9, 3929.0], [26.0, 3931.0], [26.1, 3933.0], [26.2, 3946.0], [26.3, 3946.0], [26.4, 3947.0], [26.5, 3949.0], [26.6, 3950.0], [26.7, 3951.0], [26.8, 3955.0], [26.9, 3955.0], [27.0, 3957.0], [27.1, 3958.0], [27.2, 3962.0], [27.3, 3963.0], [27.4, 3970.0], [27.5, 3971.0], [27.6, 3975.0], [27.7, 3979.0], [27.8, 3979.0], [27.9, 3982.0], [28.0, 3982.0], [28.1, 3983.0], [28.2, 3984.0], [28.3, 3985.0], [28.4, 3986.0], [28.5, 3991.0], [28.6, 3998.0], [28.7, 4000.0], [28.8, 4004.0], [28.9, 4012.0], [29.0, 4019.0], [29.1, 4029.0], [29.2, 4032.0], [29.3, 4033.0], [29.4, 4034.0], [29.5, 4036.0], [29.6, 4037.0], [29.7, 4043.0], [29.8, 4051.0], [29.9, 4052.0], [30.0, 4052.0], [30.1, 4053.0], [30.2, 4054.0], [30.3, 4059.0], [30.4, 4062.0], [30.5, 4063.0], [30.6, 4079.0], [30.7, 4079.0], [30.8, 4080.0], [30.9, 4081.0], [31.0, 4082.0], [31.1, 4084.0], [31.2, 4084.0], [31.3, 4085.0], [31.4, 4085.0], [31.5, 4087.0], [31.6, 4088.0], [31.7, 4093.0], [31.8, 4093.0], [31.9, 4094.0], [32.0, 4095.0], [32.1, 4095.0], [32.2, 4095.0], [32.3, 4100.0], [32.4, 4102.0], [32.5, 4102.0], [32.6, 4112.0], [32.7, 4112.0], [32.8, 4115.0], [32.9, 4117.0], [33.0, 4121.0], [33.1, 4123.0], [33.2, 4129.0], [33.3, 4129.0], [33.4, 4131.0], [33.5, 4135.0], [33.6, 4136.0], [33.7, 4140.0], [33.8, 4143.0], [33.9, 4147.0], [34.0, 4147.0], [34.1, 4149.0], [34.2, 4151.0], [34.3, 4151.0], [34.4, 4155.0], [34.5, 4160.0], [34.6, 4161.0], [34.7, 4162.0], [34.8, 4169.0], [34.9, 4170.0], [35.0, 4173.0], [35.1, 4175.0], [35.2, 4175.0], [35.3, 4175.0], [35.4, 4176.0], [35.5, 4176.0], [35.6, 4176.0], [35.7, 4178.0], [35.8, 4180.0], [35.9, 4183.0], [36.0, 4184.0], [36.1, 4185.0], [36.2, 4185.0], [36.3, 4185.0], [36.4, 4185.0], [36.5, 4185.0], [36.6, 4186.0], [36.7, 4187.0], [36.8, 4190.0], [36.9, 4191.0], [37.0, 4192.0], [37.1, 4195.0], [37.2, 4199.0], [37.3, 4200.0], [37.4, 4204.0], [37.5, 4206.0], [37.6, 4208.0], [37.7, 4214.0], [37.8, 4214.0], [37.9, 4217.0], [38.0, 4218.0], [38.1, 4219.0], [38.2, 4219.0], [38.3, 4224.0], [38.4, 4225.0], [38.5, 4226.0], [38.6, 4226.0], [38.7, 4226.0], [38.8, 4227.0], [38.9, 4232.0], [39.0, 4237.0], [39.1, 4240.0], [39.2, 4241.0], [39.3, 4244.0], [39.4, 4246.0], [39.5, 4255.0], [39.6, 4259.0], [39.7, 4263.0], [39.8, 4265.0], [39.9, 4267.0], [40.0, 4267.0], [40.1, 4270.0], [40.2, 4271.0], [40.3, 4271.0], [40.4, 4283.0], [40.5, 4287.0], [40.6, 4290.0], [40.7, 4291.0], [40.8, 4292.0], [40.9, 4292.0], [41.0, 4293.0], [41.1, 4294.0], [41.2, 4295.0], [41.3, 4300.0], [41.4, 4300.0], [41.5, 4303.0], [41.6, 4307.0], [41.7, 4308.0], [41.8, 4309.0], [41.9, 4311.0], [42.0, 4313.0], [42.1, 4316.0], [42.2, 4322.0], [42.3, 4322.0], [42.4, 4326.0], [42.5, 4331.0], [42.6, 4332.0], [42.7, 4334.0], [42.8, 4335.0], [42.9, 4335.0], [43.0, 4336.0], [43.1, 4337.0], [43.2, 4338.0], [43.3, 4338.0], [43.4, 4340.0], [43.5, 4340.0], [43.6, 4347.0], [43.7, 4347.0], [43.8, 4354.0], [43.9, 4355.0], [44.0, 4357.0], [44.1, 4361.0], [44.2, 4361.0], [44.3, 4362.0], [44.4, 4362.0], [44.5, 4362.0], [44.6, 4363.0], [44.7, 4366.0], [44.8, 4373.0], [44.9, 4381.0], [45.0, 4381.0], [45.1, 4381.0], [45.2, 4387.0], [45.3, 4389.0], [45.4, 4389.0], [45.5, 4389.0], [45.6, 4393.0], [45.7, 4395.0], [45.8, 4397.0], [45.9, 4401.0], [46.0, 4403.0], [46.1, 4404.0], [46.2, 4404.0], [46.3, 4405.0], [46.4, 4405.0], [46.5, 4408.0], [46.6, 4411.0], [46.7, 4416.0], [46.8, 4421.0], [46.9, 4426.0], [47.0, 4427.0], [47.1, 4429.0], [47.2, 4430.0], [47.3, 4430.0], [47.4, 4433.0], [47.5, 4435.0], [47.6, 4437.0], [47.7, 4438.0], [47.8, 4438.0], [47.9, 4439.0], [48.0, 4440.0], [48.1, 4444.0], [48.2, 4445.0], [48.3, 4445.0], [48.4, 4450.0], [48.5, 4450.0], [48.6, 4453.0], [48.7, 4456.0], [48.8, 4457.0], [48.9, 4457.0], [49.0, 4465.0], [49.1, 4465.0], [49.2, 4467.0], [49.3, 4469.0], [49.4, 4469.0], [49.5, 4470.0], [49.6, 4471.0], [49.7, 4472.0], [49.8, 4477.0], [49.9, 4478.0], [50.0, 4483.0], [50.1, 4483.0], [50.2, 4487.0], [50.3, 4491.0], [50.4, 4492.0], [50.5, 4495.0], [50.6, 4495.0], [50.7, 4495.0], [50.8, 4497.0], [50.9, 4497.0], [51.0, 4501.0], [51.1, 4505.0], [51.2, 4507.0], [51.3, 4514.0], [51.4, 4514.0], [51.5, 4517.0], [51.6, 4521.0], [51.7, 4521.0], [51.8, 4524.0], [51.9, 4524.0], [52.0, 4530.0], [52.1, 4531.0], [52.2, 4544.0], [52.3, 4544.0], [52.4, 4546.0], [52.5, 4550.0], [52.6, 4552.0], [52.7, 4555.0], [52.8, 4560.0], [52.9, 4560.0], [53.0, 4561.0], [53.1, 4562.0], [53.2, 4565.0], [53.3, 4565.0], [53.4, 4565.0], [53.5, 4565.0], [53.6, 4567.0], [53.7, 4568.0], [53.8, 4572.0], [53.9, 4577.0], [54.0, 4579.0], [54.1, 4582.0], [54.2, 4590.0], [54.3, 4596.0], [54.4, 4597.0], [54.5, 4599.0], [54.6, 4603.0], [54.7, 4606.0], [54.8, 4608.0], [54.9, 4609.0], [55.0, 4612.0], [55.1, 4613.0], [55.2, 4617.0], [55.3, 4618.0], [55.4, 4618.0], [55.5, 4625.0], [55.6, 4630.0], [55.7, 4631.0], [55.8, 4632.0], [55.9, 4633.0], [56.0, 4633.0], [56.1, 4633.0], [56.2, 4636.0], [56.3, 4639.0], [56.4, 4641.0], [56.5, 4641.0], [56.6, 4642.0], [56.7, 4648.0], [56.8, 4654.0], [56.9, 4655.0], [57.0, 4656.0], [57.1, 4657.0], [57.2, 4663.0], [57.3, 4664.0], [57.4, 4665.0], [57.5, 4667.0], [57.6, 4667.0], [57.7, 4668.0], [57.8, 4671.0], [57.9, 4676.0], [58.0, 4677.0], [58.1, 4685.0], [58.2, 4686.0], [58.3, 4687.0], [58.4, 4688.0], [58.5, 4689.0], [58.6, 4690.0], [58.7, 4699.0], [58.8, 4707.0], [58.9, 4710.0], [59.0, 4711.0], [59.1, 4713.0], [59.2, 4715.0], [59.3, 4720.0], [59.4, 4721.0], [59.5, 4721.0], [59.6, 4723.0], [59.7, 4723.0], [59.8, 4723.0], [59.9, 4734.0], [60.0, 4736.0], [60.1, 4738.0], [60.2, 4741.0], [60.3, 4742.0], [60.4, 4746.0], [60.5, 4756.0], [60.6, 4762.0], [60.7, 4762.0], [60.8, 4770.0], [60.9, 4774.0], [61.0, 4775.0], [61.1, 4780.0], [61.2, 4785.0], [61.3, 4791.0], [61.4, 4797.0], [61.5, 4799.0], [61.6, 4799.0], [61.7, 4802.0], [61.8, 4805.0], [61.9, 4807.0], [62.0, 4835.0], [62.1, 4840.0], [62.2, 4849.0], [62.3, 4854.0], [62.4, 4855.0], [62.5, 4880.0], [62.6, 4886.0], [62.7, 4889.0], [62.8, 4890.0], [62.9, 4898.0], [63.0, 4905.0], [63.1, 4908.0], [63.2, 4909.0], [63.3, 4910.0], [63.4, 4917.0], [63.5, 4931.0], [63.6, 4936.0], [63.7, 4937.0], [63.8, 4939.0], [63.9, 4944.0], [64.0, 4946.0], [64.1, 4948.0], [64.2, 4955.0], [64.3, 4956.0], [64.4, 4958.0], [64.5, 4969.0], [64.6, 4973.0], [64.7, 4974.0], [64.8, 4976.0], [64.9, 4978.0], [65.0, 4984.0], [65.1, 4985.0], [65.2, 4988.0], [65.3, 4992.0], [65.4, 4995.0], [65.5, 4995.0], [65.6, 4999.0], [65.7, 5000.0], [65.8, 5005.0], [65.9, 5006.0], [66.0, 5007.0], [66.1, 5007.0], [66.2, 5008.0], [66.3, 5008.0], [66.4, 5010.0], [66.5, 5034.0], [66.6, 5037.0], [66.7, 5037.0], [66.8, 5050.0], [66.9, 5052.0], [67.0, 5059.0], [67.1, 5062.0], [67.2, 5063.0], [67.3, 5063.0], [67.4, 5072.0], [67.5, 5081.0], [67.6, 5083.0], [67.7, 5087.0], [67.8, 5088.0], [67.9, 5097.0], [68.0, 5100.0], [68.1, 5101.0], [68.2, 5103.0], [68.3, 5103.0], [68.4, 5105.0], [68.5, 5105.0], [68.6, 5106.0], [68.7, 5108.0], [68.8, 5114.0], [68.9, 5117.0], [69.0, 5139.0], [69.1, 5141.0], [69.2, 5141.0], [69.3, 5143.0], [69.4, 5143.0], [69.5, 5147.0], [69.6, 5148.0], [69.7, 5148.0], [69.8, 5151.0], [69.9, 5153.0], [70.0, 5154.0], [70.1, 5155.0], [70.2, 5157.0], [70.3, 5158.0], [70.4, 5158.0], [70.5, 5166.0], [70.6, 5172.0], [70.7, 5181.0], [70.8, 5181.0], [70.9, 5182.0], [71.0, 5185.0], [71.1, 5192.0], [71.2, 5201.0], [71.3, 5201.0], [71.4, 5202.0], [71.5, 5205.0], [71.6, 5210.0], [71.7, 5217.0], [71.8, 5218.0], [71.9, 5218.0], [72.0, 5221.0], [72.1, 5223.0], [72.2, 5238.0], [72.3, 5244.0], [72.4, 5259.0], [72.5, 5283.0], [72.6, 5292.0], [72.7, 5305.0], [72.8, 5314.0], [72.9, 5318.0], [73.0, 5319.0], [73.1, 5328.0], [73.2, 5340.0], [73.3, 5354.0], [73.4, 5381.0], [73.5, 5391.0], [73.6, 5405.0], [73.7, 5431.0], [73.8, 5455.0], [73.9, 5459.0], [74.0, 5460.0], [74.1, 5479.0], [74.2, 5533.0], [74.3, 5550.0], [74.4, 5556.0], [74.5, 5582.0], [74.6, 5584.0], [74.7, 5590.0], [74.8, 5604.0], [74.9, 5606.0], [75.0, 5649.0], [75.1, 5686.0], [75.2, 5701.0], [75.3, 5702.0], [75.4, 5725.0], [75.5, 5726.0], [75.6, 5738.0], [75.7, 5766.0], [75.8, 5828.0], [75.9, 5887.0], [76.0, 5891.0], [76.1, 5972.0], [76.2, 6025.0], [76.3, 6316.0], [76.4, 6530.0], [76.5, 6562.0], [76.6, 6608.0], [76.7, 6630.0], [76.8, 6636.0], [76.9, 6643.0], [77.0, 6647.0], [77.1, 6648.0], [77.2, 6662.0], [77.3, 6668.0], [77.4, 6686.0], [77.5, 6687.0], [77.6, 6696.0], [77.7, 6712.0], [77.8, 6720.0], [77.9, 6728.0], [78.0, 6732.0], [78.1, 6735.0], [78.2, 6735.0], [78.3, 6749.0], [78.4, 6759.0], [78.5, 6789.0], [78.6, 6823.0], [78.7, 6824.0], [78.8, 6828.0], [78.9, 6881.0], [79.0, 6899.0], [79.1, 6963.0], [79.2, 6965.0], [79.3, 7111.0], [79.4, 7117.0], [79.5, 7142.0], [79.6, 7150.0], [79.7, 7153.0], [79.8, 7198.0], [79.9, 7245.0], [80.0, 7319.0], [80.1, 7370.0], [80.2, 7377.0], [80.3, 7387.0], [80.4, 7425.0], [80.5, 7494.0], [80.6, 7701.0], [80.7, 8138.0], [80.8, 9746.0], [80.9, 9757.0], [81.0, 9809.0], [81.1, 9858.0], [81.2, 9863.0], [81.3, 9882.0], [81.4, 9891.0], [81.5, 9891.0], [81.6, 9899.0], [81.7, 9935.0], [81.8, 9935.0], [81.9, 9948.0], [82.0, 9957.0], [82.1, 9958.0], [82.2, 9965.0], [82.3, 9969.0], [82.4, 9978.0], [82.5, 9986.0], [82.6, 9996.0], [82.7, 10002.0], [82.8, 10021.0], [82.9, 10040.0], [83.0, 10044.0], [83.1, 10048.0], [83.2, 10055.0], [83.3, 10060.0], [83.4, 10072.0], [83.5, 10082.0], [83.6, 10090.0], [83.7, 10112.0], [83.8, 10112.0], [83.9, 10113.0], [84.0, 10129.0], [84.1, 10132.0], [84.2, 10133.0], [84.3, 10141.0], [84.4, 10160.0], [84.5, 10160.0], [84.6, 10160.0], [84.7, 10163.0], [84.8, 10195.0], [84.9, 10265.0], [85.0, 10311.0], [85.1, 10682.0], [85.2, 10689.0], [85.3, 10697.0], [85.4, 10700.0], [85.5, 10711.0], [85.6, 10712.0], [85.7, 10762.0], [85.8, 11026.0], [85.9, 11057.0], [86.0, 11172.0], [86.1, 11337.0], [86.2, 11339.0], [86.3, 11347.0], [86.4, 14908.0], [86.5, 15062.0], [86.6, 15169.0], [86.7, 15186.0], [86.8, 15207.0], [86.9, 15229.0], [87.0, 15293.0], [87.1, 15320.0], [87.2, 15398.0], [87.3, 15411.0], [87.4, 15512.0], [87.5, 15687.0], [87.6, 15706.0], [87.7, 15726.0], [87.8, 15799.0], [87.9, 15814.0], [88.0, 15853.0], [88.1, 15888.0], [88.2, 15890.0], [88.3, 15913.0], [88.4, 15934.0], [88.5, 16008.0], [88.6, 16062.0], [88.7, 16092.0], [88.8, 16107.0], [88.9, 16119.0], [89.0, 16127.0], [89.1, 16138.0], [89.2, 16139.0], [89.3, 16143.0], [89.4, 16175.0], [89.5, 16185.0], [89.6, 16195.0], [89.7, 16233.0], [89.8, 16244.0], [89.9, 16262.0], [90.0, 16274.0], [90.1, 16280.0], [90.2, 16299.0], [90.3, 16303.0], [90.4, 16303.0], [90.5, 16309.0], [90.6, 16313.0], [90.7, 16335.0], [90.8, 16340.0], [90.9, 16344.0], [91.0, 16348.0], [91.1, 16371.0], [91.2, 16373.0], [91.3, 16385.0], [91.4, 16387.0], [91.5, 16429.0], [91.6, 16437.0], [91.7, 16438.0], [91.8, 16440.0], [91.9, 16441.0], [92.0, 16443.0], [92.1, 16455.0], [92.2, 16465.0], [92.3, 16466.0], [92.4, 16467.0], [92.5, 16507.0], [92.6, 16516.0], [92.7, 16532.0], [92.8, 16538.0], [92.9, 16542.0], [93.0, 16542.0], [93.1, 16545.0], [93.2, 16546.0], [93.3, 16564.0], [93.4, 16639.0], [93.5, 16646.0], [93.6, 16706.0], [93.7, 16712.0], [93.8, 16797.0], [93.9, 16897.0], [94.0, 21244.0], [94.1, 21255.0], [94.2, 21266.0], [94.3, 21300.0], [94.4, 21320.0], [94.5, 21489.0], [94.6, 21572.0], [94.7, 21584.0], [94.8, 21661.0], [94.9, 21852.0], [95.0, 21868.0], [95.1, 22143.0], [95.2, 22157.0], [95.3, 22163.0], [95.4, 22251.0], [95.5, 22347.0], [95.6, 22436.0], [95.7, 22443.0], [95.8, 22474.0], [95.9, 22528.0], [96.0, 22551.0], [96.1, 22555.0], [96.2, 22570.0], [96.3, 22573.0], [96.4, 22589.0], [96.5, 22610.0], [96.6, 22622.0], [96.7, 22661.0], [96.8, 22663.0], [96.9, 22666.0], [97.0, 22717.0], [97.1, 22725.0], [97.2, 22744.0], [97.3, 22788.0], [97.4, 22791.0], [97.5, 22800.0], [97.6, 22840.0], [97.7, 22852.0], [97.8, 22861.0], [97.9, 22868.0], [98.0, 22883.0], [98.1, 22910.0], [98.2, 22923.0], [98.3, 22933.0], [98.4, 22947.0], [98.5, 22949.0], [98.6, 22949.0], [98.7, 22961.0], [98.8, 22964.0], [98.9, 22964.0], [99.0, 22969.0], [99.1, 22976.0], [99.2, 22997.0], [99.3, 23040.0], [99.4, 23067.0], [99.5, 23108.0], [99.6, 23120.0], [99.7, 23162.0], [99.8, 23203.0], [99.9, 23220.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 51.0, "series": [{"data": [[100.0, 18.0], [200.0, 16.0], [300.0, 9.0], [400.0, 11.0], [500.0, 15.0], [700.0, 1.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 3.0], [1500.0, 2.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2300.0, 1.0], [2600.0, 3.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 5.0], [3300.0, 10.0], [3200.0, 4.0], [3400.0, 16.0], [3500.0, 18.0], [3600.0, 25.0], [3700.0, 31.0], [3800.0, 39.0], [3900.0, 42.0], [4000.0, 36.0], [4200.0, 40.0], [4100.0, 50.0], [4300.0, 46.0], [4400.0, 51.0], [4500.0, 36.0], [4600.0, 42.0], [4700.0, 29.0], [4800.0, 13.0], [4900.0, 27.0], [5100.0, 32.0], [5000.0, 23.0], [5200.0, 15.0], [5300.0, 9.0], [5400.0, 6.0], [5500.0, 6.0], [5600.0, 4.0], [5700.0, 6.0], [5800.0, 3.0], [6000.0, 2.0], [5900.0, 1.0], [6300.0, 1.0], [6500.0, 2.0], [6600.0, 11.0], [6700.0, 9.0], [6800.0, 5.0], [6900.0, 2.0], [7100.0, 6.0], [7300.0, 4.0], [7400.0, 2.0], [7200.0, 1.0], [7700.0, 1.0], [8100.0, 1.0], [9700.0, 2.0], [10000.0, 10.0], [9900.0, 10.0], [10100.0, 12.0], [10200.0, 1.0], [9800.0, 7.0], [10600.0, 3.0], [10700.0, 4.0], [10300.0, 1.0], [11100.0, 1.0], [11000.0, 2.0], [11300.0, 3.0], [15300.0, 2.0], [15200.0, 3.0], [15100.0, 2.0], [15000.0, 1.0], [14900.0, 1.0], [15800.0, 4.0], [15700.0, 3.0], [15600.0, 1.0], [15500.0, 1.0], [15400.0, 1.0], [16300.0, 12.0], [16100.0, 9.0], [16200.0, 6.0], [16000.0, 3.0], [15900.0, 2.0], [16800.0, 1.0], [16700.0, 3.0], [16500.0, 9.0], [16400.0, 10.0], [16600.0, 2.0], [21500.0, 2.0], [21400.0, 1.0], [21200.0, 3.0], [21300.0, 2.0], [22500.0, 6.0], [22400.0, 3.0], [22300.0, 1.0], [22200.0, 1.0], [22100.0, 3.0], [21800.0, 2.0], [21600.0, 1.0], [22700.0, 5.0], [22600.0, 5.0], [22800.0, 6.0], [23200.0, 2.0], [23100.0, 3.0], [23000.0, 2.0], [22900.0, 12.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 919.0, "series": [{"data": [[0.0, 3.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 11.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 919.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 67.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 71.17391304347827, "minX": 1.71788382E12, "maxY": 246.2681678607981, "series": [{"data": [[1.71788388E12, 246.2681678607981], [1.71788382E12, 71.17391304347827]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71788388E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2044.7142857142858, "minX": 1.0, "maxY": 23203.0, "series": [{"data": [[2.0, 21255.0], [3.0, 14908.0], [4.0, 21320.0], [5.0, 21266.0], [6.0, 21244.0], [7.0, 15293.0], [8.0, 15062.0], [9.0, 22551.0], [10.0, 21489.0], [11.0, 21584.0], [18.0, 17049.142857142855], [19.0, 15398.0], [20.0, 15411.0], [21.0, 21852.0], [22.0, 15512.0], [23.0, 21868.0], [24.0, 15687.0], [25.0, 15706.0], [26.0, 22143.0], [27.0, 22157.0], [28.0, 22163.0], [29.0, 15890.0], [30.0, 15934.0], [31.0, 16092.0], [33.0, 15888.0], [32.0, 22589.0], [35.0, 16262.0], [34.0, 22663.0], [37.0, 15799.0], [36.0, 22622.0], [39.0, 15814.0], [38.0, 15726.0], [41.0, 22251.0], [40.0, 15853.0], [43.0, 2433.875], [42.0, 15913.0], [45.0, 22788.0], [44.0, 22443.0], [47.0, 16119.0], [46.0, 22347.0], [49.0, 16143.0], [48.0, 16139.0], [50.0, 16107.0], [53.0, 16244.0], [52.0, 16156.0], [55.0, 16280.0], [54.0, 22661.0], [57.0, 22610.0], [56.0, 22436.0], [59.0, 8188.0], [58.0, 8587.5], [60.0, 12027.0], [61.0, 16062.0], [62.0, 22474.0], [67.0, 22910.0], [66.0, 16429.0], [65.0, 22717.0], [64.0, 16266.5], [69.0, 8488.0], [68.0, 12029.5], [71.0, 22964.0], [70.0, 16545.0], [75.0, 16465.0], [74.0, 16443.0], [73.0, 22791.0], [72.0, 23120.0], [79.0, 4363.666666666666], [78.0, 10044.0], [77.0, 22903.0], [83.0, 22933.0], [82.0, 10112.0], [81.0, 22861.0], [80.0, 16516.0], [87.0, 16542.0], [86.0, 22969.0], [85.0, 22949.0], [84.0, 10132.0], [91.0, 22744.0], [90.0, 10160.0], [89.0, 22961.0], [88.0, 10160.0], [95.0, 8903.666666666668], [94.0, 16532.0], [93.0, 10072.0], [92.0, 16455.0], [98.0, 9266.0], [99.0, 10160.0], [97.0, 22964.0], [96.0, 16546.0], [101.0, 12521.0], [103.0, 10195.0], [102.0, 16639.0], [100.0, 22976.0], [107.0, 23108.0], [106.0, 16706.0], [105.0, 16646.0], [104.0, 23040.0], [110.0, 12693.5], [111.0, 16797.0], [109.0, 23203.0], [108.0, 23162.0], [114.0, 9996.0], [113.0, 22868.0], [112.0, 10141.0], [116.0, 15977.666666666666], [119.0, 9891.0], [118.0, 10082.0], [117.0, 9891.0], [121.0, 6249.0], [123.0, 22528.0], [122.0, 10133.0], [120.0, 22573.0], [127.0, 9986.0], [126.0, 22666.0], [125.0, 9746.0], [124.0, 9809.0], [135.0, 5062.0], [134.0, 6279.5], [133.0, 10113.0], [132.0, 10060.0], [131.0, 10040.0], [130.0, 10021.0], [129.0, 10002.0], [128.0, 22725.0], [138.0, 9556.5], [143.0, 6647.0], [142.0, 6648.0], [141.0, 6759.0], [140.0, 16437.0], [139.0, 16466.0], [137.0, 6674.0], [147.0, 9690.0], [150.0, 4987.5], [151.0, 10163.0], [149.0, 6881.0], [148.0, 16542.0], [146.0, 16441.0], [145.0, 6789.0], [144.0, 6749.0], [154.0, 6517.0], [159.0, 3174.0], [158.0, 16365.5], [156.0, 9965.0], [155.0, 16373.0], [153.0, 6823.0], [152.0, 16538.0], [167.0, 4456.666666666667], [166.0, 6728.0], [165.0, 9935.0], [164.0, 16348.0], [163.0, 5158.0], [162.0, 12021.0], [170.0, 8168.0], [172.0, 9876.0], [171.0, 5129.5], [175.0, 6673.5], [174.0, 6630.0], [173.0, 16138.0], [169.0, 16274.0], [168.0, 9899.0], [179.0, 4617.666666666667], [183.0, 16340.0], [182.0, 5148.0], [181.0, 5072.0], [180.0, 6735.0], [178.0, 6696.0], [177.0, 16299.0], [176.0, 6643.0], [188.0, 5362.0], [191.0, 4471.5], [190.0, 16303.0], [189.0, 5083.0], [187.0, 10265.0], [186.0, 16313.0], [185.0, 5148.0], [184.0, 6732.0], [195.0, 5370.0], [194.0, 4529.0], [199.0, 9948.0], [198.0, 3994.5], [196.0, 10129.0], [193.0, 9958.0], [192.0, 5143.0], [200.0, 4014.25], [201.0, 5344.75], [202.0, 3563.0], [203.0, 3941.125], [205.0, 2762.25], [204.0, 4127.0], [206.0, 4137.333333333333], [207.0, 3743.0], [212.0, 4438.0], [211.0, 4415.333333333333], [210.0, 7089.0], [209.0, 4201.0], [213.0, 5069.5], [215.0, 7425.0], [214.0, 5155.0], [217.0, 4464.888888888889], [216.0, 5601.6], [218.0, 4468.6], [223.0, 4068.285714285714], [222.0, 4581.6], [221.0, 3850.8571428571427], [220.0, 3645.1], [219.0, 4488.125], [224.0, 4236.666666666667], [226.0, 4002.5], [231.0, 4845.166666666667], [228.0, 4937.0], [230.0, 4527.0], [229.0, 4154.0], [227.0, 3395.0], [225.0, 3696.0], [233.0, 4814.0], [239.0, 4718.5], [238.0, 4081.5], [237.0, 4500.333333333333], [236.0, 4171.833333333333], [235.0, 5163.0], [234.0, 8848.0], [232.0, 4171.0], [244.0, 6124.0], [243.0, 4339.833333333334], [242.0, 5345.6], [241.0, 4660.0], [245.0, 4252.8], [246.0, 4714.0], [247.0, 3372.0], [240.0, 6687.0], [253.0, 4774.666666666667], [255.0, 4103.4], [254.0, 4193.25], [252.0, 4419.25], [251.0, 4404.2], [250.0, 4088.333333333333], [249.0, 3894.857142857143], [248.0, 3916.5], [258.0, 4446.666666666666], [259.0, 3573.2857142857147], [257.0, 3898.4999999999995], [256.0, 4553.625], [261.0, 4365.166666666667], [263.0, 3205.0], [262.0, 3904.125], [260.0, 3785.75], [265.0, 3922.8333333333335], [264.0, 4435.5], [271.0, 6220.833333333333], [266.0, 3833.2], [267.0, 2556.0], [270.0, 4717.8], [269.0, 3857.0], [268.0, 3961.1666666666665], [274.0, 5421.6], [281.0, 4179.857142857143], [283.0, 3797.6666666666665], [282.0, 4218.6], [280.0, 4209.75], [278.0, 4531.571428571428], [276.0, 3893.75], [277.0, 3747.0], [275.0, 3318.8], [284.0, 3918.0], [273.0, 4460.833333333334], [272.0, 3628.4], [279.0, 3186.5333333333333], [286.0, 4169.0], [287.0, 3791.5], [285.0, 4732.0], [301.0, 4226.0], [289.0, 3825.6666666666665], [288.0, 3774.5], [295.0, 3587.0], [294.0, 10090.0], [293.0, 3493.0], [292.0, 3697.0], [291.0, 4073.0], [290.0, 3804.0], [296.0, 4150.5], [303.0, 7339.666666666667], [302.0, 4309.0], [300.0, 3674.0], [299.0, 3398.0], [298.0, 3584.0], [316.0, 5423.0], [319.0, 4461.285714285715], [313.0, 5302.875], [312.0, 4094.0], [314.0, 5055.888888888889], [315.0, 4391.5], [318.0, 4456.333333333334], [317.0, 2044.7142857142858], [309.0, 5603.4], [308.0, 4085.0], [307.0, 4638.666666666667], [306.0, 4187.0], [305.0, 4569.0], [304.0, 3336.0], [311.0, 5058.0], [310.0, 4316.0], [332.0, 4264.6], [322.0, 6710.333333333333], [323.0, 4338.5], [321.0, 4516.0], [331.0, 3797.222222222222], [330.0, 4393.666666666667], [329.0, 4219.666666666667], [328.0, 4185.0], [333.0, 5269.857142857142], [334.0, 4581.777777777777], [335.0, 4497.9375], [326.0, 4463.6], [325.0, 16712.0], [324.0, 3729.0], [327.0, 10689.0], [320.0, 3325.6666666666665], [349.0, 4332.5], [351.0, 4606.0], [350.0, 3708.0], [348.0, 5106.0], [339.0, 4334.0], [338.0, 3879.0000000000005], [337.0, 4322.6], [336.0, 4500.25], [347.0, 4554.5], [346.0, 4763.166666666667], [345.0, 4762.666666666666], [344.0, 4474.75], [343.0, 4631.2], [342.0, 5803.0], [341.0, 3110.2], [340.0, 4335.5], [354.0, 3350.666666666667], [356.0, 6432.4], [357.0, 5596.0], [355.0, 4510.0], [364.0, 3814.0], [353.0, 4767.666666666667], [352.0, 4806.333333333333], [359.0, 5593.428571428572], [358.0, 4541.25], [360.0, 2815.1], [361.0, 4184.0], [363.0, 4420.0], [362.0, 4367.571428571428], [367.0, 4825.333333333333], [366.0, 5058.0], [365.0, 2463.333333333333], [374.0, 4687.0], [373.0, 3686.0], [371.0, 4062.0], [370.0, 4259.0], [369.0, 4170.0], [368.0, 4883.0], [1.0, 21300.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[242.24099999999984, 6448.314000000006]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 374.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 88.93333333333334, "minX": 1.71788382E12, "maxY": 8084.383333333333, "series": [{"data": [[1.71788388E12, 8084.383333333333], [1.71788382E12, 134.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71788388E12, 3522.5333333333333], [1.71788382E12, 88.93333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71788388E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1253.2608695652173, "minX": 1.71788382E12, "maxY": 6570.613101330605, "series": [{"data": [[1.71788388E12, 6570.613101330605], [1.71788382E12, 1253.2608695652173]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71788388E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1253.1304347826085, "minX": 1.71788382E12, "maxY": 6549.50460593654, "series": [{"data": [[1.71788388E12, 6549.50460593654], [1.71788382E12, 1253.1304347826085]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71788388E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 45.1304347826087, "minX": 1.71788382E12, "maxY": 2994.790174002046, "series": [{"data": [[1.71788388E12, 2994.790174002046], [1.71788382E12, 45.1304347826087]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71788388E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 465.0, "minX": 1.71788382E12, "maxY": 23220.0, "series": [{"data": [[1.71788388E12, 23220.0], [1.71788382E12, 2386.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71788388E12, 16343.6], [1.71788382E12, 2242.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71788388E12, 22975.23], [1.71788382E12, 2386.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71788388E12, 22294.199999999993], [1.71788382E12, 2367.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71788388E12, 2645.0], [1.71788382E12, 465.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71788388E12, 4601.0], [1.71788382E12, 1207.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71788388E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 103.0, "minX": 7.0, "maxY": 22391.5, "series": [{"data": [[33.0, 6754.0], [32.0, 22391.5], [35.0, 4899.0], [9.0, 1207.0], [36.0, 4334.0], [39.0, 5120.0], [38.0, 3922.0], [10.0, 2961.5], [41.0, 3692.0], [40.0, 4100.0], [42.0, 9891.0], [44.0, 5091.5], [45.0, 16092.0], [47.0, 4799.0], [46.0, 4397.0], [49.0, 4220.5], [51.0, 4109.5], [18.0, 3860.0], [7.0, 1192.5], [28.0, 4291.0], [31.0, 4422.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 352.5], [35.0, 403.5], [36.0, 203.0], [39.0, 104.0], [40.0, 3985.0], [42.0, 103.0], [44.0, 201.0], [47.0, 151.5], [46.0, 304.0], [49.0, 203.0], [51.0, 402.0], [18.0, 303.0], [28.0, 202.0], [31.0, 403.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 7.0, "maxY": 22391.5, "series": [{"data": [[33.0, 6754.0], [32.0, 22391.5], [35.0, 4899.0], [9.0, 1207.0], [36.0, 4334.0], [39.0, 5120.0], [38.0, 3922.0], [10.0, 2961.5], [41.0, 3692.0], [40.0, 4100.0], [42.0, 9891.0], [44.0, 5091.5], [45.0, 16092.0], [47.0, 4798.0], [46.0, 4397.0], [49.0, 4220.5], [51.0, 4109.5], [18.0, 3860.0], [7.0, 1192.5], [28.0, 4291.0], [31.0, 4422.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 0.0], [35.0, 0.0], [36.0, 0.0], [39.0, 0.0], [40.0, 3985.0], [42.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [51.0, 0.0], [18.0, 0.0], [28.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.71788382E12, "maxY": 14.133333333333333, "series": [{"data": [[1.71788388E12, 14.133333333333333], [1.71788382E12, 2.533333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71788388E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71788382E12, "maxY": 15.166666666666666, "series": [{"data": [[1.71788388E12, 15.166666666666666], [1.71788382E12, 0.38333333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71788388E12, 0.016666666666666666]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.71788388E12, 1.1]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71788388E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.71788382E12, "maxY": 15.166666666666666, "series": [{"data": [[1.71788388E12, 15.166666666666666], [1.71788382E12, 0.38333333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71788388E12, 1.1166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71788388E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.71788382E12, "maxY": 15.166666666666666, "series": [{"data": [[1.71788388E12, 15.166666666666666], [1.71788382E12, 0.38333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71788388E12, 1.1166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71788388E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

